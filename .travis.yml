# setting langauges to c++ and python
language: c++
language: python
sudo: true
c++:
  -17
  -20
python:
  - 3.7
compiler:
  - clang
  - gcc
cache: npm
# Handle git submodules yourself
git:
    submodules: false
# Use sed to replace the SSH URL with the public URL, then initialize submodules
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-9
      - g++-9

before_install:
  - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
  - git submodule update --init --recursive
  - sudo apt-get update
  - sudo apt-get install libblas-dev
  - sudo apt-get install liblapack-dev
  - sudo apt-get install liblapacke-dev
  - sudo apt-get install libopenblas-dev
  - sudo apt-get install doxygen
  - sudo apt-get install libspdlog-dev
  - sudo apt-get install python3-sphinx
  - sudo apt-get install libatlas-base-dev
  - python --version
  - pip install -U pip
  - pip install -U pytest
  - pip install codecov

install:
  # create a build folder for the out-of-source build
  - mkdir build
  # switch to build directory
  - cd build
  # run cmake; here we assume that the project's
  # top-level CMakeLists.txt is located at '..'
  - cmake ..
before_script:

script:
  - export CC=gcc-9
  - export CXX=g++-9
  # once CMake has done its job we just build using make as usual
  - make
  # if the project uses ctest we can run the tests like this
  - make test
after_success:

after_failure:

after_script:

deploy:
  provider: pages
  skip-cleanup: true
  github-token: $GITHUB_TOKEN
  on:
    branch: gh-pages
